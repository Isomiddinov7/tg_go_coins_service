// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user_sell_or_buy.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserSellOrBuyService_UserSell_FullMethodName = "/users_service.UserSellOrBuyService/UserSell"
	UserSellOrBuyService_UserBuy_FullMethodName  = "/users_service.UserSellOrBuyService/UserBuy"
)

// UserSellOrBuyServiceClient is the client API for UserSellOrBuyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSellOrBuyServiceClient interface {
	UserSell(ctx context.Context, in *UserSellRequest, opts ...grpc.CallOption) (*UserBuySellImgPrimaryKey, error)
	UserBuy(ctx context.Context, in *UserBuyRequest, opts ...grpc.CallOption) (*UserBuySellImgPrimaryKey, error)
}

type userSellOrBuyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSellOrBuyServiceClient(cc grpc.ClientConnInterface) UserSellOrBuyServiceClient {
	return &userSellOrBuyServiceClient{cc}
}

func (c *userSellOrBuyServiceClient) UserSell(ctx context.Context, in *UserSellRequest, opts ...grpc.CallOption) (*UserBuySellImgPrimaryKey, error) {
	out := new(UserBuySellImgPrimaryKey)
	err := c.cc.Invoke(ctx, UserSellOrBuyService_UserSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSellOrBuyServiceClient) UserBuy(ctx context.Context, in *UserBuyRequest, opts ...grpc.CallOption) (*UserBuySellImgPrimaryKey, error) {
	out := new(UserBuySellImgPrimaryKey)
	err := c.cc.Invoke(ctx, UserSellOrBuyService_UserBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSellOrBuyServiceServer is the server API for UserSellOrBuyService service.
// All implementations must embed UnimplementedUserSellOrBuyServiceServer
// for forward compatibility
type UserSellOrBuyServiceServer interface {
	UserSell(context.Context, *UserSellRequest) (*UserBuySellImgPrimaryKey, error)
	UserBuy(context.Context, *UserBuyRequest) (*UserBuySellImgPrimaryKey, error)
	mustEmbedUnimplementedUserSellOrBuyServiceServer()
}

// UnimplementedUserSellOrBuyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSellOrBuyServiceServer struct {
}

func (UnimplementedUserSellOrBuyServiceServer) UserSell(context.Context, *UserSellRequest) (*UserBuySellImgPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSell not implemented")
}
func (UnimplementedUserSellOrBuyServiceServer) UserBuy(context.Context, *UserBuyRequest) (*UserBuySellImgPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBuy not implemented")
}
func (UnimplementedUserSellOrBuyServiceServer) mustEmbedUnimplementedUserSellOrBuyServiceServer() {}

// UnsafeUserSellOrBuyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSellOrBuyServiceServer will
// result in compilation errors.
type UnsafeUserSellOrBuyServiceServer interface {
	mustEmbedUnimplementedUserSellOrBuyServiceServer()
}

func RegisterUserSellOrBuyServiceServer(s grpc.ServiceRegistrar, srv UserSellOrBuyServiceServer) {
	s.RegisterService(&UserSellOrBuyService_ServiceDesc, srv)
}

func _UserSellOrBuyService_UserSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSellOrBuyServiceServer).UserSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSellOrBuyService_UserSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSellOrBuyServiceServer).UserSell(ctx, req.(*UserSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSellOrBuyService_UserBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSellOrBuyServiceServer).UserBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSellOrBuyService_UserBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSellOrBuyServiceServer).UserBuy(ctx, req.(*UserBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSellOrBuyService_ServiceDesc is the grpc.ServiceDesc for UserSellOrBuyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSellOrBuyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.UserSellOrBuyService",
	HandlerType: (*UserSellOrBuyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSell",
			Handler:    _UserSellOrBuyService_UserSell_Handler,
		},
		{
			MethodName: "UserBuy",
			Handler:    _UserSellOrBuyService_UserBuy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_sell_or_buy.proto",
}
