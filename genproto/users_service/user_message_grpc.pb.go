// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user_message.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserMessageList_GetMessageList_FullMethodName = "/users_service.UserMessageList/GetMessageList"
)

// UserMessageListClient is the client API for UserMessageList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMessageListClient interface {
	GetMessageList(ctx context.Context, in *UserPrimaryKey, opts ...grpc.CallOption) (*UserMessage, error)
}

type userMessageListClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMessageListClient(cc grpc.ClientConnInterface) UserMessageListClient {
	return &userMessageListClient{cc}
}

func (c *userMessageListClient) GetMessageList(ctx context.Context, in *UserPrimaryKey, opts ...grpc.CallOption) (*UserMessage, error) {
	out := new(UserMessage)
	err := c.cc.Invoke(ctx, UserMessageList_GetMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMessageListServer is the server API for UserMessageList service.
// All implementations must embed UnimplementedUserMessageListServer
// for forward compatibility
type UserMessageListServer interface {
	GetMessageList(context.Context, *UserPrimaryKey) (*UserMessage, error)
	mustEmbedUnimplementedUserMessageListServer()
}

// UnimplementedUserMessageListServer must be embedded to have forward compatible implementations.
type UnimplementedUserMessageListServer struct {
}

func (UnimplementedUserMessageListServer) GetMessageList(context.Context, *UserPrimaryKey) (*UserMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageList not implemented")
}
func (UnimplementedUserMessageListServer) mustEmbedUnimplementedUserMessageListServer() {}

// UnsafeUserMessageListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMessageListServer will
// result in compilation errors.
type UnsafeUserMessageListServer interface {
	mustEmbedUnimplementedUserMessageListServer()
}

func RegisterUserMessageListServer(s grpc.ServiceRegistrar, srv UserMessageListServer) {
	s.RegisterService(&UserMessageList_ServiceDesc, srv)
}

func _UserMessageList_GetMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMessageListServer).GetMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMessageList_GetMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMessageListServer).GetMessageList(ctx, req.(*UserPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMessageList_ServiceDesc is the grpc.ServiceDesc for UserMessageList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMessageList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.UserMessageList",
	HandlerType: (*UserMessageListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageList",
			Handler:    _UserMessageList_GetMessageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_message.proto",
}
